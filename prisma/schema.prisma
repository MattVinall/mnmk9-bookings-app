generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Pet {
  id         String     @id @default(uuid())
  name       String
  ownerId    String
  breed      String?
  vaccinated Boolean?   @default(false)
  petOwner   User       @relation(fields: [ownerId], references: [id])
  Bookings   Bookings[]

  @@index([ownerId])
}

model Services {
  id          String     @id @default(uuid())
  price       Int
  serviceName String     @unique
  bookings    Bookings[]

  @@index([serviceName])
}

model Bookings {
  id        String    @id @default(uuid())
  petId     String
  serviceId String
  createdAt DateTime  @default(now())
  email     String
  updatedAt DateTime? @updatedAt()
  userId    String
  pet       Pet       @relation(fields: [petId], references: [id])
  service   Services  @relation(fields: [serviceId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId, serviceId, petId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String
  email         String     @unique
  emailVerified DateTime?
  image         String?
  address       String?
  city          String?
  phoneNumber   String?
  postalCode    String?
  pets          Pet[]
  bookings      Bookings[]
  accounts      Account[]
  sessions      Session[]

  @@index([email, id, phoneNumber])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
